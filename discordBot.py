import disnake
import asyncio
import logging
from aiogram.dispatcher.filters.state import StatesGroup, State
from disnake.ext import commands
from database import Database
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext


ds_token = ''

tg_token = ''

intents = disnake.Intents.default().all()

db = Database()

ID_CHANNEL = 1059414521422290988

logging.basicConfig(level=logging.INFO)

tg = Bot(token=tg_token)
dp = Dispatcher(tg, storage=MemoryStorage())

ds = commands.Bot(command_prefix='/', intents=intents)


class Form(StatesGroup):
    waiting_for_discord_id = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    info = await db.full_info_user(message.chat.id)
    if not info:
        kb = [
            [
                types.KeyboardButton(text="üëî –ü—Ä–∏–≤—è–∑–∞—Ç—å –¥–∏—Å–∫–æ—Ä–¥")
            ]
        ]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=kb)
        await tg.send_message(message.chat.id, "[‚úÖ] –í—ã —É—Å–ø–µ—à–Ω–æ –≤–Ω–µ—Å–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ –±–æ—Ç–∞!", reply_markup=markup)
        await db.add_user(user_id_telegram=message.chat.id,
                          firstname=message.from_user.first_name,
                          username=message.from_user.username)
    elif not info[1]:
        kb = [
            [
                types.KeyboardButton(text="üëî –ü—Ä–∏–≤—è–∑–∞—Ç—å –¥–∏—Å–∫–æ—Ä–¥")
            ]
        ]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=kb)
        await tg.send_message(message.chat.id, "[‚úç] –ü—Ä–∏–≤—è–∂–∏—Ç–µ —Å–≤–æ–π –¥–∏—Å–∫–æ—Ä–¥!", reply_markup=markup)
    else:
        await tg.send_message(message.chat.id, '[üëå] –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!')

@dp.message_handler(commands=['sendall'])
async def sendall(message: types.Message):
    if message.chat.id == 2023527964:
        message_options = message.text
        list = await db.all_user_id_tg()
        kb = [
            [
                types.KeyboardButton(text="/notifications")
            ]
        ]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=kb)
        for user in list:
            await tg.send_message(user, f'{message_options[0]}', reply_markup=markup)

        await tg.send_message(message.chat.id, f'–æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤—Å–µ–º [{list}]')
    else:
        pass

@dp.message_handler(commands=['notifications'])
async def notifications(message: types.Message):
    check_not = await db.full_info_user(message.chat.id)
    if check_not[6] == "–í—ã–∫–ª—é—á–µ–Ω—ã":
        await db.update_notif(notifications="–í–∫–ª—é—á–µ–Ω—ã", user_id_tg=message.chat.id)
        await tg.send_message(message.chat.id, "[üü¢] –í—ã –≤–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–∏—Å–∫–æ—Ä–¥–∞!")
    elif check_not[6] == '–í–∫–ª—é—á–µ–Ω—ã':
        await db.update_notif(notifications="–í—ã–∫–ª—é—á–µ–Ω—ã", user_id_tg=message.chat.id)
        await tg.send_message(message.chat.id, "[üî¥] –í—ã –≤—ã–∫–ª—é—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–∏—Å–∫–æ—Ä–¥–∞!")
    else:
        await tg.send_message("[‚õî] –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!")

@dp.message_handler(lambda msg: msg.text.startswith('üëî –ü—Ä–∏–≤—è–∑–∞—Ç—å –¥–∏—Å–∫–æ—Ä–¥'))
async def input_id_discord(message: types.Message):
    await Form.waiting_for_discord_id.set()
    await message.answer("–ß—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Discord ID, –≤–≤–µ–¥–∏—Ç–µ –≤ Discord –∫–æ–º–∞–Ω–¥—É /myid")
    await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Discord ID:')


@dp.message_handler(commands=['discord'])
async def input_id_discord(message: types.Message):
    await Form.waiting_for_discord_id.set()
    await message.answer("–ß—Ç–æ –±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Discord ID, –≤–≤–µ–¥–∏—Ç–µ –≤ Discord –∫–æ–º–∞–Ω–¥—É /myid")
    await message.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π Discord ID:')


@dp.message_handler(state=Form.waiting_for_discord_id)
async def process_discord_id(message: types.Message, state: FSMContext):
    discord_id = message.text
    try:
        discord_int = int(discord_id)
        await db.update_discord_id(user_id_tg=message.chat.id,
                                   user_id_ds=discord_id)
        types.ReplyKeyboardRemove()
        kb = [
            [
                types.KeyboardButton(text="/notifications")
            ]
        ]
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, keyboard=kb)
        await message.reply(
            f"–í–∞—à Discord ID {discord_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!\n–ï—Å–ª–∏ –≤–¥—Ä—É–≥ –≤—ã —Å–ª—É—á–∞–π–Ω–æ –≤–≤–µ–ª–∏ –Ω–µ —Ç–æ—Ç ID, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /discord", reply_markup=markup)
        await state.finish()
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Discord ID (—á–∏—Å–ª–æ).")


@dp.message_handler()
async def message_in_discord(message: types.Message):
    cooldown = 15
    info_cd = await db.info_cooldown_tg(user_id_tg=message.chat.id)
    if info_cd == 0:
        user_text = message.text
        await on_ready(name=message.from_user.first_name, message=user_text)
        await db.update_cooldown_tg(cooldown_tg=cooldown, user_id_tg=message.chat.id)
        asyncio.create_task(handle_cooldown_tg(message.chat.id, cooldown))
    else:
        await message.answer(f"[‚ùå] –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ {info_cd} —Å–µ–∫—É–Ω–¥!")


async def handle_cooldown_tg(user_id, cooldown):
    while cooldown > 0:
        await asyncio.sleep(1)  # –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É
        cooldown -= 1
        await db.update_cooldown_tg(cooldown_tg=cooldown, user_id_tg=user_id)
    await tg.send_message(user_id, "[‚úÖ] –í—ã –≤–Ω–æ–≤—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏—Å–∫–æ—Ä–¥!")


@ds.event
async def on_ready(name, message):
    URL = f'[{name}](https://t.me/{name})'
    embed = disnake.Embed(title=f"[üì©] –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–º –æ—Ç: ", description=URL, color=disnake.Colour.blue())
    embed.add_field(name='[üìù] –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:', value=message)
    embed.set_thumbnail(url="https://cdn2.iconfinder.com/data/icons/round-set-vol-2/120/sending-1024.png")
    channel = ds.get_channel(ID_CHANNEL)
    await channel.send(embed=embed)


@ds.event
async def on_message(message):
    if message.author == ds.user:
        return

    user_list = await db.info_id_not()

    for userid in user_list:
        await tg.send_message(userid, f'{message.author}:\n{message.content}')

@ds.slash_command(name="myid", description='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
async def myid(interaction: disnake.ApplicationCommandInteraction):
    await interaction.send(f'–í–∞—à ID: {interaction.author.id}', ephemeral=True)


@ds.slash_command(name='info', description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º")
async def info(interaction: disnake.ApplicationCommandInteraction):
    users = await db.info()
    user_list = '\n'.join([f'{user[2]} - @{user[3]}' for user in users])
    embed = disnake.Embed(title=f'[üåê] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∫–æ—Ç–æ—Ä—ã–º –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:\n',
                          color=disnake.Colour.blurple())
    embed.add_field(name='', value=user_list)
    embed.add_field(name="–ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?",
                    value="–í–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /stg -> –≤—ã–±—Ä–∞—Ç—å –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å -> –Ω–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    inline=False)
    embed.set_thumbnail(url="https://cdn2.iconfinder.com/data/icons/round-set-vol-2/120/sending-1024.png")
    await interaction.send(embed=embed, ephemeral=True)


@ds.slash_command(name='stg', description="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º")
async def stg(interaction: disnake.ApplicationCommandInteraction, name: str, message: str):
    try:
        cooldown = 15
        info_cd = await db.info_cooldown_ds(user_id_ds=interaction.author.id)
        if info_cd == 0:
            users = await db.info()
            user_list = [f'{user[2]}' for user in users]
            if name in user_list:
                user = interaction.user
                user_id = await db.info_id(name)
                await interaction.send(f"[üì®] –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é - {name}!")
                await tg.send_message(user_id, f'[{message}] - –æ—Ç {user.name}')
                await db.update_cooldown_ds(cooldown=cooldown, user_id_ds=interaction.author.id)
                asyncio.create_task(handle_cooldown(interaction.author.id, cooldown))
            else:
                await interaction.send(f"[‚ùå] –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!")
        else:
            await interaction.send(f"[‚ùå] –í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ {info_cd} —Å–µ–∫—É–Ω–¥!")
    except:
        await interaction.send("[‚ùå] –í—ã –Ω–µ –ø—Ä–∏–≤—è–∑–∞–ª–∏ Discord ID –∫ Telegram –±–æ—Ç—É!")


@stg.autocomplete('name')
async def name_autocomplete(interaction: disnake.ApplicationCommandInteraction, current: str):
    users = await db.info()
    user_list = [f'{user[2]}' for user in users]
    choices = [name for name in user_list if current.lower() in name.lower()]
    return choices


async def handle_cooldown(user_id_ds, cooldown):
    while cooldown > 0:
        await asyncio.sleep(1)
        cooldown -= 1
        await db.update_cooldown_ds(cooldown=cooldown, user_id_ds=user_id_ds)
    user = ds.get_user(user_id_ds)
    await user.send("[‚úÖ] –í—ã –≤–Ω–æ–≤—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º!")


@ds.slash_command(name="dev", description="–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞")
async def dev(interaction: disnake.ApplicationCommandInteraction):
    embed = disnake.Embed(title="[üë®üèª‚Äçüíª] –û –±–æ—Ç–µ:", color=0x185200)
    embed.add_field(name="[üõ†] –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", value="@solarezzwhynot")
    embed.add_field(name="[‚öôÔ∏è] –í–µ—Ä—Å–∏—è", value="0.6")
    embed.add_field(name="[üí≥] –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–µ–µ—á–∫–æ–π –¥–ª—è —Ö–æ—Å—Ç–∏–Ω–≥–∞", value="2200 7007 1699 4750")
    embed.set_thumbnail(url="https://i.pinimg.com/originals/f8/d0/bc/f8d0bc025046ab637a78a09598b905a7.png")
    await interaction.send(embed=embed)


async def main():
    # Start the Telegram bot
    await dp.start_polling()


# Run both bots
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    loop.create_task(main())
    loop.run_until_complete(ds.start(ds_token))
